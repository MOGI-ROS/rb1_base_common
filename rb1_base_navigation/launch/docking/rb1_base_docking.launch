<?xml version="1.0"?>
<launch>
<!-- rb1_base_docking -->

	<arg name="id_robot" default="robot"/>
	<arg name="prefix" value="$(arg id_robot)_"/>
	<arg name="docking_qr" default="true"/>
	<arg name="docking_laser_reflectors" default="false"/>

	<arg name="distance_between_reflectors" default="0.355" />


	<arg name="fixed_frame" default="$(arg prefix)odom"/>
	<arg name="robot_base_frame" default="$(arg prefix)base_footprint"/>
	<!-- ar -->
	<arg name="marker_size" default="0.12" />
	<arg name="max_new_marker_error" default="0.0008" />
	<arg name="max_track_error" default="0.002" />
	<arg name="cam_image_topic" default="front_rgbd_camera/rgb/image_raw" />
	<arg name="cam_info_topic" default="front_rgbd_camera/rgb/camera_info" />
	<arg name="object_frame" default="$(arg prefix)noisy_marker"/>

	<!-- laser -->
	<arg name="laser_dock_middle_frame" default="$(arg prefix)docking_station_laser"/>
	<arg name="laser_filtered_dock_frame" default="$(arg prefix)filtered_docking_station_laser"/>
	<arg name="laser_filtered_contact_dock_frame" default="$(arg prefix)docking_station_laser_contact"/>
	<arg name="config_laser_reflectors_filter" default="$(find rb1_base_navigation)/config/docking/laser_filter_reflectors.yaml"/>
        <arg name="source_topic" default="front_laser/scan" />
	<arg name="target_topic" default="front_laser/cloud_reflector" />

	<group ns="$(arg id_robot)">

	    <group if="$(arg docking_qr)">

		    <!--node name="ar_track_alvar" pkg="ar_track_alvar" type="individualMarkersNoKinect" respawn="false" output="screen">
			<param name="marker_size" type="double" value="12"/>
			<param name="output_frame" type="string" value="robot_front_rgbd_camera_rgb_optical_frame"/>
			<remap from="camera_image" to="$(arg cam_image_topic)"/>
			<remap from="camera_info" to="$(arg cam_info_topic)"/>
		    </node-->


		      <node name="camera_locator" pkg="robotnik_locator" type="alvar_locator_node" output="screen">
			<param name="desired_freq" type="double" value="10"/>
			<!-- frame in which output is published -->
			<param name="fixed_frame" type="string" value="$(arg fixed_frame)"/>
			<!-- frame to which input is transformed -->
			<param name="robot_base_frame" type="string" value="$(arg robot_base_frame)"/>
			<param name="output_frame" value="robot_front_rgbd_camera_rgb_optical_frame" />


			<!-- output frame. if locator is able to provide id, this will be  -->
			<param name="object_frame" type="string" value="$(arg object_frame)"/>
			<param name="input_topic_name" type="string" value="$(arg cam_image_topic)"/>
			<param name="camera_info_topic_name" type="string" value="$(arg cam_info_topic)"/>
			<param name="marker_size" type="double" value="$(arg marker_size)"/>
			<param name="margin" type="double" value="0.015"/>
			<param name="max_new_marker_error" type="double" value="$(arg max_new_marker_error)"/>
			<param name="max_track_error" type="double" value="$(arg max_track_error)"/>
			<rosparam command="load" file="$(find rb1_base_navigation)/config/docking/markers.yaml" />
		      </node>



		    <node name="marker2contact" pkg="tf" type="static_transform_publisher" args="-0.49 0.0 0 0 0 0 $(arg prefix)marker_docking_station $(arg prefix)docking_station_contact_for_base_frame 50" />

		    <node name="tf_robotnik_pose_filter" pkg="robotnik_pose_filter" type="tf_pose_filter_node" respawn="false" output="screen">
			    <param name="filter_position_sensitivity"       type="double" value="0.8" />
			    <param name="filter_orientation_sensitivity"    type="double" value="0.2" />
			    <param name="source_frame" type="string" value="$(arg fixed_frame)" />
			    <param name="target_frame" type="string" value="$(arg prefix)noisy_marker_docking_station" />
			    <param name="filtered_source_frame" type="string" value="$(arg fixed_frame)" />
			    <param name="filtered_target_frame" type="string" value="$(arg prefix)marker_docking_station" />
			    <param name="two_d_mode" type="bool" value="true" />
			    <rosparam param="apply_transform">[0.0, 0.0, 0.0, 0.0, 1.5707, 1.5707]</rosparam>
		    </node>

		    <node name="qr_docker" pkg="robotnik_docker" type="diff_docker_node" respawn="false" output="screen">
			    <param name="robot_base_frame" type="string" value="$(arg robot_base_frame)" />

			    <param name="fixed_frame" type="string" value="$(arg fixed_frame)" />

			    <param name="gain_linear_velocity_x" value="0.5" />
			    <param name="gain_angular_velocity_z" value="0.5" />

			    <param name="maximum_linear_velocity_x" value="0.4" />
			    <param name="maximum_angular_velocity_z" value="0.7" />

			    <param name="threshold_linear_velocity_x" value="0.002" />
			    <param name="threshold_linear_velocity_y" value="0.002" />
			    <param name="threshold_angular_velocity_z" value="0.005" />

			    <param name="goal_threshold_x" value="0.005" />
			    <param name="goal_threshold_y" value="0.005" />
			    <param name="goal_threshold_theta" value="0.06" />

			    <param name="initial_maximum_distance_x" value="2.5" />
			    <param name="initial_minimum_distance_x" value="0.5" />

			    <param name="minimum_relative_linear_velocity_between_robot_and_goal" value="0.001" />
			    <param name="minimum_relative_angular_velocity_between_robot_and_goal" value="0.002" />

			    <param name="initial_maximum_arc" value="0.7" />
			    <param name="initial_maximum_yaw" value="1" />
			    <param name="offset_for_heading_adjustment" value="0.3"/>

			    <remap from="cmd_vel" to="docker/cmd_vel"/>
			    <param name="check_robot_is_moving_to_goal" value="true" />
			    <param name="robot_moving_to_goal_delay" value="3" />
			    <param name="robot_moving_to_goal_averaging_time" value="1.0" />

		    </node>

	    </group>

	    <group if="$(arg docking_laser_reflectors)">

		<node pkg="laser_filters" type="scan_to_cloud_filter_chain" name="scan_to_cloud_filter_reflector">
			<rosparam command="load" file="$(arg config_laser_reflectors_filter)"/>
			<param name="high_fidelity" value="true"/>
			<param name="incident_angle_correction" value="false"/>
			<param name="target_frame"  value="$(arg robot_base_frame)"/>
			<remap from="scan" to="$(arg source_topic)"/>
			<remap from="cloud_filtered" to="$(arg target_topic)"/>
		</node>

		<node pkg="robotnik_locator" type="two_tag_laser_locator_node" name="two_tag_laser_locator_node">
			<param name="robot_base_frame" value="$(arg robot_base_frame)"/>
			<param name="fixed_frame" value="$(arg fixed_frame)" />
			<param name="object_frame" value="$(arg laser_dock_middle_frame)"/>
			<param name="scan_topic_name" value="$(arg target_topic)" />
			<param name="min_num_cluster" type="int" value="10"/>
			<param name="max_num_cluser" type="int" value="50"/>
			<param name="cluster_tolerance" value="0.05"/>
			<param name="tag_distance" value="$(arg distance_between_reflectors)"/>
			<param name="tag_distance_margin" value="0.1"/>
			<param name="distance_detection" value="3.5"/>
			<param name="desired_freq" value="40.0"/>
			<param name="filter_object_by_orientation" value="false"/>
		</node>

		<node name="tf_laser_dock_pose_filter" pkg="robotnik_pose_filter" type="tf_pose_filter_node" respawn="false">
			<param name="filter_position_sensitivity"       type="double" value="0.8" />
			<param name="filter_orientation_sensitivity"    type="double" value="0.2" />
			<param name="source_frame" type="string" value="$(arg fixed_frame)" />
			<param name="target_frame" type="string" value="$(arg laser_dock_middle_frame)" />
			<param name="filtered_source_frame" type="string" value="$(arg fixed_frame)" />
			<param name="filtered_target_frame" type="string" value="$(arg laser_filtered_dock_frame)" />
			<param name="two_d_mode" type="bool" value="false" />
			<rosparam param="apply_transform">[0.0, 0.0, 0.0, 0.0, 0.0, 1.5707]</rosparam>
			<!-- if not set, does not apply a transform. transform is xyz-rpy, 6 parameters. remember that rotation is applied in reverse order (ypr) -->
		</node>

		<node name="tf_publisher_laser2contact" pkg="tf" type="static_transform_publisher" args="-0.25 0.0 0 0 0 0 $(arg laser_filtered_dock_frame) $(arg laser_filtered_contact_dock_frame) 100" />
		<node name="tf_publisher_contact2base_footprint" pkg="tf" type="static_transform_publisher" args="-0.25 0.0 0 0 0 0  $(arg laser_filtered_contact_dock_frame)  $(arg laser_filtered_contact_dock_frame)_for_base_frame 50" />

		<node name="laser_reflectors_docker" pkg="robotnik_docker" type="diff_docker_node" respawn="false" output="screen">
			<param name="robot_base_frame" type="string" value="$(arg robot_base_frame)" />
			<param name="fixed_frame" type="string" value="$(arg fixed_frame)" />

			<param name="gain_linear_velocity_x" value="0.5" />
			<param name="gain_angular_velocity_z" value="0.5" />

			<param name="maximum_linear_velocity_x" value="0.4" />
			<param name="maximum_angular_velocity_z" value="0.7" />

			<param name="threshold_linear_velocity_x" value="0.002" />
			<param name="threshold_linear_velocity_y" value="0.002" />
			<param name="threshold_angular_velocity_z" value="0.005" />

			<param name="goal_threshold_x" value="0.005" />
			<param name="goal_threshold_y" value="0.005" />
			<param name="goal_threshold_theta" value="0.06" />

			<param name="initial_maximum_distance_x" value="2.5" />
			<param name="initial_minimum_distance_x" value="0.5" />

			<param name="minimum_relative_linear_velocity_between_robot_and_goal" value="0.001" />
			<param name="minimum_relative_angular_velocity_between_robot_and_goal" value="0.002" />

			<param name="initial_maximum_arc" value="0.7" />
			<param name="initial_maximum_yaw" value="1" />
			<param name="offset_for_heading_adjustment" value="0.3"/>

			<remap from="cmd_vel" to="docker/cmd_vel"/>
			<param name="check_robot_is_moving_to_goal" value="true" />
			<param name="robot_moving_to_goal_delay" value="3" />
			<param name="robot_moving_to_goal_averaging_time" value="1.0" />

		</node>
	    </group>
	    <node name="pp_docker" pkg="robotnik_docker" type="purepursuit_docker_node" respawn="false" output="screen">
		    <param name="robot_base_frame" type="string" value="$(arg robot_base_frame)" />
		    <param name="fixed_frame" type="string" value="$(arg fixed_frame)" />

		    <param name="gain_linear_velocity_x" value="0.5" />
		    <param name="gain_angular_velocity_z" value="2.0" />

		    <param name="maximum_linear_velocity_x" value="0.2" />
		    <param name="maximum_angular_velocity_z" value="0.7" />

		    <param name="minimum_relative_linear_velocity_between_robot_and_goal" value="0.01" />
		    <param name="minimum_relative_angular_velocity_between_robot_and_goal" value="0.005" />

		    <param name="check_robot_is_moving_to_goal" value="true" />
		    <param name="robot_moving_to_goal_delay" value="30.0" />

		    <param name="free_goal_velocity" value="true" />

		    <param name="goal_threshold_x" value="0.01" />
		    <param name="goal_threshold_y" value="0.01" />

		    <param name="threshold_linear_velocity_x" value="0.01" />
		    <param name="threshold_linear_velocity_y" value="0.01" />
		    <param name="threshold_angular_velocity_z" value="0.01" />

		    <param name="check_initial_limits" value="false" />

		    <!-- custom params -->
		    <param name="kr" value="0.2"/>
		    <param name="look_ahead" value="0.3"/>
		    <param name="pre_dock_point_distance" value="-1.0"/>
		    <remap from="cmd_vel" to="docker/cmd_vel"/>
		    <param name="free_flight_mode" value="true" />

	    </node>

	</group>
</launch>
